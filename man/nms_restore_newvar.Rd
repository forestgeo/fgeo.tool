% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nms_manipulate_names.R
\name{nms_restore_newvar}
\alias{nms_restore_newvar}
\title{Restore the names of a dataframe to which a new variable has been added.}
\usage{
nms_restore_newvar(x, new_var, old_nms)
}
\arguments{
\item{x}{A dataframe.}

\item{new_var}{The name of a single new variable added to \code{x}.}

\item{old_nms}{A vector containing the old names of \code{x}.}
}
\value{
Returns the input with the names changed accordingly.
}
\description{
This function helps to develop functions that work with both ViewFullTables
and census tables. ViewFullTables and census tables share multiple names but
often the case of those names is different (e.g. \code{Tag} and \code{tag}). When
developing functions that work with both ViewFullTables and fgeo tables, one
solution is to lowercase all names, do whatever the function needs to do, and
then restore the old names. This function helps by restoring old names, which
is not straight forward when the function adds a new variable and may contain
a preexisting variable with the same name of the added variable.
}
\details{
The length of \code{x} must equal the number of names in old_nms, or that + 1".

\code{\link[=nms_restore_newvar]{nms_restore_newvar()}} is similar to \code{\link[=nms_restore]{nms_restore()}} but specifically
targets dataframes that have been mutated with \code{\link[dplyr:mutate]{dplyr::mutate()}}.
\code{\link[dplyr:mutate]{dplyr::mutate()}} drops attributes
(https://github.com/tidyverse/dplyr/issues/1984), which makes it
\code{\link[=nms_restore]{nms_restore()}} useless. attributes.
}
\examples{
# Data does not contain the variable that will be added
dfm <- data.frame(X = 1, Y = "a")
(old <- names(dfm))
# Lower names
(dfm <- rlang::set_names(dfm, tolower))
# Add a variable
mutated <- dplyr::mutate(dfm, newvar = x + 1)
# Restore
nms_restore_newvar(mutated, "newvar", old)

# Data contains the variable that will be added
dfm <- data.frame(X = 1, Y = "a", newvar = "2")
(old <- names(dfm))
# Lower names
(dfm <- rlang::set_names(dfm, tolower))
# Add a variable
mutated <- dplyr::mutate(dfm, newvar = x + 1)
# Restore
nms_restore_newvar(mutated, "newvar", old)
}
\seealso{
Other functions dealing with names: \code{\link{nms_extract_anycase}},
  \code{\link{nms_lowercase}}, \code{\link{nms_tidy}},
  \code{\link{nms_try_rename}}, \code{\link{nms}}

Other functions for developers: \code{\link{is_multiple}},
  \code{\link{nms_extract_anycase}},
  \code{\link{nms_lowercase}}, \code{\link{nms_tidy}},
  \code{\link{nms_try_rename}}, \code{\link{nms}}
}
\concept{functions dealing with names}
\concept{functions for developers}
\keyword{internal}
