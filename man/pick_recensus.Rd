% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pick_recensus.R
\name{pick_recensus}
\alias{pick_recensus}
\title{Pick rows from table x with no-match in table y (e.g. find recensused trees).}
\usage{
pick_recensus(x, y, by = NULL, ...)
}
\arguments{
\item{x, y}{Dataframes to join:
\itemize{
\item \code{x}: Reference table with columns giving information on the unique
identifier of each stem and the quadrat it occurs.
\item \code{y}: Table with column giving information on the unique identifier of
each stem.
}}

\item{by}{a character vector of variables to join by.  If \code{NULL}, the
default, \code{*_join()} will do a natural join, using all variables with
common names across the two tables. A message lists the variables so
that you can check they're right (to suppress the message, simply
explicitly list the variables that you want to join).

To join by different variables on x and y use a named vector.
For example, \code{by = c("a" = "b")} will match \code{x.a} to
\code{y.b}.}

\item{...}{Other parameters passed onto \link[dplyr:anti_join]{dplyr::anti_join}.}
}
\value{
Returns all rows from \code{x} where there are not matching values in
\code{y}, keeping just columns from \code{x}.
}
\description{
Based on a reference dataset \code{x}, this function helps you
identify stems that remain to be recensused in a dataset \code{y}. This
function does the same work as \code{\link[dplyr:anti_join]{dplyr::anti_join()}}. The only difference is
that the signature of \code{pick_recensus()} is a little simpler (irrelevant
arguments hidden via \code{...}) to focus your attention on the arguments that are
most useful in helping you identify stems to recensus. This function also
exists to help you discover the \code{*join()} functions of \strong{dplyr}, which will
help you solve more general problems.
}
\details{
This function preserves \strong{dplyr}'s style and thus non-standard evaluation.
If you want to use it inside your own functions, you should learn about tidy
eval (implemented via the \strong{rlang} package). A good place to start is at
\strong{dplyr}'s website.
}
\examples{
x <- tribble(
  ~unique_stem, ~quadrat,
        "01_1",    "001",
        "02_1",    "001",
        "02_2",    "001",
        "04_1",    "002",
        "04_2",    "002",
        "05_1",    "002"
)
y <- tribble(
  ~unique_stem,
        "01_1",
        "02_2",
        "04_2"
)

pick_recensus(x, y)

# Same
pick_recensus(x, y, by = "unique_stem")

y2 <- dplyr::tribble(
  ~unq_stem,
     "01_1",
     "02_2",
     "04_2"
)
pick_recensus(x, y2, by = c("unique_stem" = "unq_stem"))

# For this and more general problems you can use `dplyr::*_join()` functions
dplyr::anti_join(x, y2, by = c("unique_stem" = "unq_stem"))
}
\seealso{
Other general functions to pick or drop rows of a dataframe: \code{\link{drop_if_na}},
  \code{\link{pick_top}}
}
\concept{general functions to pick or drop rows of a dataframe}
