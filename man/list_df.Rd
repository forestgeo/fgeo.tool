% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_output.R
\name{list_df}
\alias{list_df}
\title{Help export a single file by reducing a list of dataframes to a single one.}
\usage{
list_df(lst, df_names = NULL, by = NULL)
}
\arguments{
\item{lst}{A list of dataframes.}

\item{df_names}{Names of the list elements to join. \code{NULL} defaults to use
all list elements.}

\item{by}{A character vector of variables to join by. If NULL, the default,
*_join() will do a natural join, using all variables with common names
across the two tables. To join by different variables on x and y use a
named vector. For example, by = c("a" = "b") will match x.a to y.b. Passed
to \code{\link[dplyr:full_join]{dplyr::full_join()}}}
}
\value{
A dataframe.
}
\description{
This function wraps \code{\link[purrr:reduce]{purrr::reduce()}} and \code{\link[dplyr:full_join]{dplyr::full_join()}} to reduce
all or some dataframes in a list into a single dataframe.
}
\examples{
dfs <- list(
  a = data.frame(x = 1),
  b = data.frame(x = 2, y = 2),
  c = data.frame(x = 1, z = 3)
)

list_df(dfs)

list_df(dfs, df_names = c("a", "c"))

list_df(dfs, df_names = c("b", "c"))

# Use argument `by` if dataframes have no matching variable,
list_df(
  list(data.frame(x = 1), data.frame(z = 2)),
  by = c("x" = "z")
)
}
\seealso{
\code{\link[purrr:reduce]{purrr::reduce()}} and \code{\link[dplyr:full_join]{dplyr::full_join()}}.

Other general functions to export data: \code{\link{list_csv}}
}
\concept{general functions to export data}
